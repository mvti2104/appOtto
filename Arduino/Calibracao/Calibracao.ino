// generated by Scratch Arduino
#include <Arduino.h>
#include <EEPROM.h>
#include <Otto.h>
Otto Otto;

// #define PIN_TRIGGER         2   // TRIGGER PIN
// #define PIN_ECHO            3   // ECHO PIN
// #define PIN_LEG_L           4   // Left leg servo
// #define PIN_LEG_R           5   // Right leg servo
// #define PIN_FOOT_L          6   // Left foot servo
// #define PIN_FOOT_R          7   // Right foot servo
// #define PIN_BUZZER          13  // BUZZER PIN

#define PIN_LEG_L           2   // Left leg servo
#define PIN_LEG_R           3   // Right leg servo
#define PIN_FOOT_L          4   // Left foot servo
#define PIN_FOOT_R          5   // Right foot servo
// #define PIN_TRIGGER         8   // TRIGGER PIN (8)
// #define PIN_ECHO            9   // ECHO PIN (9)
#define PIN_BUZZER          13  // BUZZER PIN (13)

int positions[4] = {90, 90, 90, 90};
int8_t trims[4] = {0, 0, 0, 0};

void help() {
  Serial.println();
  Serial.println("Otto Robot Calibration:");
  Serial.println("Send 'd' or 'f' for adjusting Left Leg");
  Serial.println("Send 'j' or 'k' for adjusting Right Leg");
  Serial.println("Send 'c' or 'v' for adjusting Left Foot");
  Serial.println("Send 'n' or 'm' for adjusting Right Foot");
  Serial.println();
  Serial.println("Send 's' to save calibration settings");
}

void set_trims() {
  Otto.setTrims(trims[0], trims[1], trims[2], trims[3]);
  Otto._moveServos(10, positions);
}

void read_char(char cmd) {
  switch (cmd) {
    case 'd':
      trims[0]++;
      set_trims();
      Serial.println();
      Serial.println(">>> Received 'd' to adjust Left Leg <<<");
      Serial.println(trims[0], DEC);
      help();
      break;
    case 'f':
      trims[0]--;
      set_trims();
      Serial.println();
      Serial.println(">>> Received 'f' to adjust Left Leg <<<");
      Serial.println(trims[0], DEC);
      help();
      break;
    case 'j':
      trims[1]++;
      set_trims();
      Serial.println();
      Serial.println(">>> Received 'j' to adjust Right Leg <<<");
      Serial.println(trims[1], DEC);
      help();
      break;
    case 'k':
      trims[1]--;
      set_trims();
      Serial.println();
      Serial.println(">>> Received 'k' to adjust Right Leg <<<");
      Serial.println(trims[1], DEC);
      help();
      break;
    case 'c':
      trims[2]++;
      set_trims();
      Serial.println();
      Serial.println(">>> Received 'c' to adjust Left Foot <<<");
      Serial.println(trims[2], DEC);
      help();
      break;
    case 'v':
      trims[2]--;
      set_trims();
      Serial.println();
      Serial.println(">>> Received 'v' to adjust Left Foot <<<");
      Serial.println(trims[2], DEC);
      help();
      break;
    case 'n':
      trims[3]++;
      set_trims();
      Serial.println();
      Serial.println(">>> Received 'n' to adjust Right Foot <<<");
      Serial.println(trims[3], DEC);
      help();
      break;
    case 'm':
      trims[3]--;
      set_trims();
      Serial.println();
      Serial.println(">>> Received 'm' to adjust Right Foot <<<");
      Serial.println(trims[3], DEC);
      help();
      break;
    case 's':
      Serial.println();
      Serial.println(">>> Received 's' to save calibration settins <<<");
      for (int i = 0; i <= 3; i++) {
          EEPROM.write(i, trims[i]);
      }
      delay(500);
      Otto.sing(S_superHappy);
      Otto.sing(S_happy_short);
      help();
      break;
  }
}

void setup() {
  Otto.init(PIN_LEG_L, PIN_LEG_R, PIN_FOOT_L, PIN_FOOT_R, true, PIN_BUZZER);
  Otto.sing(S_connection);   // Otto wake up!
  delay(50);
  Otto.playGesture(OttoHappy);
  Otto.home();
  Otto.init(PIN_LEG_L, PIN_LEG_R, PIN_FOOT_L, PIN_FOOT_R, true, PIN_BUZZER);
  Otto.home();
  Serial.begin(9600);
  while (!Serial);
  help();
}

void loop() {
  read_char(Serial.read());
}
